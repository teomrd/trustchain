var solc = require("solc");
var Web3 = require("web3");
var fs = require("fs");

var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));

var coinbase = web3.eth.coinbase;
console.log(coinbase);
web3.eth.defaultAccount = coinbase; //'0x099e0d0839150d859dc6ddcd45d8038c1757bb9c';
var balance = web3.eth.getBalance(coinbase);
console.log(balance.toString(10));

var gasPrice = web3.eth.gasPrice;
console.log(gasPrice.toString(10));

var balance = web3.eth.getBalance("0xa72aaaef396a6edad72dddb05ee7b57c04c76db4");
console.log(balance); // instanceof BigNumber
var formatbalance = balance.toString(10);
console.log(formatbalance); // instanceof BigNumber
console.log(balance.toString(10)); // '1000000000000'
console.log(balance.toNumber()); // 1000000000000

var input = fs.readFileSync("./contracts/trustChain.sol").toString();
var output = solc.compile(input, 1); // 1 activates the optimiser
//console.log(output);

for (var contractName in output.contracts) {
  // code and ABI that are needed by web3
  //console.log(contractName + ': ' + output.contracts[contractName].bytecode);
  //console.log(contractName + '; ' + JSON.parse(output.contracts[contractName].interface));

  var code = "0x" + output.contracts[contractName].bytecode; //compiled[keye[0]].code;
  console.log(code);
  // contract json abi, this is autogenerated using solc CLI
  var abi = JSON.parse(output.contracts[contractName].interface); //compiled[keye[0]].info.abiDefinition;
  console.log(abi);
  var myContract;
  //var blockwatch = web3.eth.filter('latest');
  //console.log(blockwatch);

  web3.eth
    .contract(abi)
    .new({ data: code, gas: 3140000 }, function(err, contract) {
      if (err) {
        console.error(err);
        return;
      } else if (contract.address) {
        myContract = contract;
        myContract.createBusinessAccount(
          "1223",
          "a72aaaef396a6edad72dddb05ee7b57c04c76db4"
        );
      }
    });
}
